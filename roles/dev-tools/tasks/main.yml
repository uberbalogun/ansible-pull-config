---
- name: Install Fish shell
  package:
    name: fish
    state: present

- name: Set Fish as default shell
  user:
    name: "{{ ansible_user_id }}"
    shell: /usr/bin/fish

- name: Install Rust using rustup
  shell: |
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain {{ rust_version }}
  args:
    creates: "{{ user_home }}/.cargo/bin/rustc"
  become: false

- name: Install Starship prompt
  shell: |
    curl -sS https://starship.rs/install.sh | sh -s -- --yes
  args:
    creates: /usr/local/bin/starship

- name: Ensure Fish config directory exists
  file:
    path: "{{ user_home }}/.config/fish"
    state: directory
    mode: '0755'
  become: false

- name: Ensure Fish functions directory exists
  file:
    path: "{{ user_home }}/.config/fish/functions"
    state: directory
    mode: '0755'
  become: false

- name: Configure Fish auto ls function
  template:
    src: auto_ls.fish.j2
    dest: "{{ user_home }}/.config/fish/functions/auto_ls.fish"
    mode: '0644'
  become: false

- name: Configure Fish with Starship
  template:
    src: config.fish.j2
    dest: "{{ user_home }}/.config/fish/config.fish"
    mode: '0644'
  become: false

- name: Create Starship config directory
  file:
    path: "{{ user_home }}/.config"
    state: directory
    mode: '0755'
  become: false

- name: Configure Starship
  template:
    src: starship.toml.j2
    dest: "{{ user_home }}/.config/starship.toml"
    mode: '0644'
  become: false

- name: Ensure Fish conf.d directory exists
  file:
    path: "{{ user_home }}/.config/fish/conf.d"
    state: directory
    mode: '0755'
  become: false

- name: Configure Fish tmux initialization
  template:
    src: tmux_init.fish.j2
    dest: "{{ user_home }}/.config/fish/conf.d/tmux_init.fish"
    mode: '0644'
  become: false

- name: Install Neovim dependencies
  package:
    name:
      - ninja-build
      - gettext
      - cmake
      - unzip
      - curl
    state: present

- name: Clone Neovim repository
  git:
    repo: https://github.com/neovim/neovim.git
    dest: /tmp/neovim
    depth: 1
  become: false

- name: Build and install Neovim
  shell: |
    cd /tmp/neovim
    make CMAKE_BUILD_TYPE=Release
    make install
  args:
    creates: /usr/local/bin/nvim

- name: Remove existing Neovim config if present
  file:
    path: "{{ user_home }}/.config/nvim"
    state: absent
  become: false

- name: Clone personal Neovim configuration
  git:
    repo: https://github.com/uberbalogun/nvim-rust.git
    dest: "{{ user_home }}/.config/nvim"
    version: main
    force: yes
  become: false

- name: Create Mason installation directory
  file:
    path: "{{ user_home }}/.local/share/nvim/mason"
    state: directory
    mode: '0755'
  become: false

- name: Install Mason plugins
  shell: |
    nvim --headless -c "MasonInstall stylua codelldb lua-language-server rust-analyzer" -c qall
  args:
    creates: "{{ user_home }}/.local/share/nvim/mason/packages/rust-analyzer"
  become: false
  environment:
    HOME: "{{ user_home }}"
    USER: "{{ ansible_user_id }}"

- name: Install Tmux Plugin Manager
  git:
    repo: https://github.com/tmux-plugins/tpm
    dest: "{{ user_home }}/.tmux/plugins/tpm"
    depth: 1
  become: false

- name: Install tmux-floax
  git:
    repo: https://github.com/omerxx/tmux-floax
    dest: "{{ user_home }}/.tmux/plugins/tmux-floax"
    depth: 1
  become: false

- name: Install tmux-sessionx
  git:
    repo: https://github.com/omerxx/tmux-sessionx
    dest: "{{ user_home }}/.tmux/plugins/tmux-sessionx"
    depth: 1
  become: false

- name: Install tmux-resurrect
  git:
    repo: https://github.com/tmux-plugins/tmux-resurrect
    dest: "{{ user_home }}/.tmux/plugins/tmux-resurrect"
    depth: 1
  become: false

- name: Install tmux-continuum
  git:
    repo: https://github.com/tmux-plugins/tmux-continuum
    dest: "{{ user_home }}/.tmux/plugins/tmux-continuum"
    depth: 1
  become: false

- name: Configure tmux
  template:
    src: tmux.conf.j2
    dest: "{{ user_home }}/.tmux.conf"
    mode: '0644'
  become: false

- name: Install tmux plugins
  shell: |
    ~/.tmux/plugins/tpm/bin/install_plugins
  args:
    creates: "{{ user_home }}/.tmux/plugins/tmux-sensible"
  become: false
  environment:
    HOME: "{{ user_home }}"
    USER: "{{ ansible_user_id }}"
