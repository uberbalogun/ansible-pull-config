---
- name: Install Fish shell
  package:
    name: fish
    state: present

- name: Set Fish as default shell
  user:
    name: "{{ ansible_user_id }}"
    shell: /usr/bin/fish

- name: Install Rust using rustup
  shell: |
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain {{ rust_version }}
  args:
    creates: "{{ user_home }}/.cargo/bin/rustc"
  become: false

- name: Install Starship prompt
  shell: |
    curl -sS https://starship.rs/install.sh | sh -s -- --yes
  args:
    creates: /usr/local/bin/starship

- name: Ensure Fish config directory exists
  file:
    path: "{{ user_home }}/.config/fish"
    state: directory
    mode: '0755'
  become: false

- name: Configure Fish with Starship
  copy:
    dest: "{{ user_home }}/.config/fish/config.fish"
    content: |
      if status is-interactive
          # Initialize Starship prompt
          starship init fish | source
          
          # Custom aliases
          alias vim='nvim'
          alias ll='ls -la'
          alias g='git'
          
          # Add cargo bin to PATH
          set -x PATH $HOME/.cargo/bin $PATH
          
          # Set environment variables
          set -x EDITOR nvim
          set -x VISUAL nvim
          
          # Enable fzf key bindings
          fzf_key_bindings
      end
    mode: '0644'
  become: false

- name: Install Neovim dependencies
  package:
    name:
      - ninja-build
      - gettext
      - cmake
      - unzip
      - curl
    state: present

- name: Clone Neovim repository
  git:
    repo: https://github.com/neovim/neovim.git
    dest: /tmp/neovim
    depth: 1
  become: false

- name: Build and install Neovim
  shell: |
    cd /tmp/neovim
    make CMAKE_BUILD_TYPE=Release
    make install
  args:
    creates: /usr/local/bin/nvim

- name: Remove existing Neovim config if present
  file:
    path: "{{ user_home }}/.config/nvim"
    state: absent
  become: false

- name: Clone personal Neovim configuration
  git:
    repo: https://github.com/uberbalogun/nvim-rust.git
    dest: "{{ user_home }}/.config/nvim"
    depth: 1
  become: false

- name: Create Mason installation directory
  file:
    path: "{{ user_home }}/.local/share/nvim/mason"
    state: directory
    mode: '0755'
  become: false

- name: Install Mason plugins
  shell: |
    nvim --headless -c "MasonInstall stylua codelldb lua-language-server rust-analyzer" -c qall
  args:
    creates: "{{ user_home }}/.local/share/nvim/mason/packages/rust-analyzer"
  become: false
  environment:
    HOME: "{{ user_home }}"
    USER: "{{ ansible_user_id }}"

- name: Install Tmux Plugin Manager
  git:
    repo: https://github.com/tmux-plugins/tpm
    dest: "{{ user_home }}/.tmux/plugins/tpm"
    depth: 1
  become: false

- name: Install tmux-floax
  git:
    repo: https://github.com/omerxx/tmux-floax
    dest: "{{ user_home }}/.tmux/plugins/tmux-floax"
    depth: 1
  become: false

- name: Install tmux-sessionx
  git:
    repo: https://github.com/omerxx/tmux-sessionx
    dest: "{{ user_home }}/.tmux/plugins/tmux-sessionx"
    depth: 1
  become: false

- name: Configure Tmux
  copy:
    dest: "{{ user_home }}/.tmux.conf"
    content: |
      # Set prefix to Ctrl-a
      unbind C-b
      set -g prefix C-a
      bind C-a send-prefix
      
      # Enable mouse support
      set -g mouse on
      
      # Start windows and panes at 1, not 0
      set -g base-index 1
      setw -g pane-base-index 1
      
      # Use vi keys in copy mode
      setw -g mode-keys vi
      
      # List of plugins
      set -g @plugin 'tmux-plugins/tpm'
      set -g @plugin 'tmux-plugins/tmux-sensible'
      set -g @plugin 'tmux-plugins/tmux-resurrect'
      set -g @plugin 'tmux-plugins/tmux-continuum'
      set -g @plugin 'dracula/tmux'
      set -g @plugin 'omerxx/tmux-floax'
      set -g @plugin 'omerxx/tmux-sessionx'
      
      # Dracula theme settings
      set -g @dracula-show-battery false
      set -g @dracula-show-weather false
      set -g @dracula-show-powerline true
      
      # Sessionx configuration
      set -g @sessionx-bind 'o'
      set -g @sessionx-x-path '~/projects'
      set -g @sessionx-window-height '85%'
      set -g @sessionx-window-width '75%'
      set -g @sessionx-zoxide-mode 'on'
      
      # Floax configuration
      set -g @floax-bind 'f'
      set -g @floax-height '85%'
      set -g @floax-width '75%'
      
      # Auto restore tmux
      set -g @continuum-restore 'on'
      
      # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
      run '~/.tmux/plugins/tpm/tpm'
    mode: '0644'
  become: false

- name: Create Starship config
  copy:
    dest: "{{ user_home }}/.config/starship.toml"
    content: |
      # Get editor completions based on the config schema
      "$schema" = 'https://starship.rs/config-schema.json'

      # Add a blank line between shell prompts
      add_newline = true

      # Replace the "‚ùØ" symbol with "‚ûú"
      [character]
      success_symbol = "[‚ûú](bold green)"
      error_symbol = "[‚ûú](bold red)"

      [directory]
      truncation_length = 8
      truncate_to_repo = true

      [git_branch]
      symbol = "üå± "
      truncation_length = 4
      truncation_symbol = ""

      [rust]
      symbol = "ü¶Ä "

      [nodejs]
      symbol = "‚¨¢ "
    mode: '0644'
  become: false
